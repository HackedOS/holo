use smithay::{
    backend::input::{
        self, AbsolutePositionEvent, Axis, AxisSource, Event, InputBackend, InputEvent, KeyState,
        KeyboardKeyEvent, PointerAxisEvent, PointerButtonEvent, PointerMotionEvent,
    },
    input::{
        keyboard::FilterResult,
        pointer::{AxisFrame, ButtonEvent, MotionEvent, RelativeMotionEvent},
    },
    utils::{Logical, Point, SERIAL_COUNTER},
};

use crate::state::{Backend, HoloState};

impl<BackendData: Backend> HoloState<BackendData> {
    pub fn process_input_event<I: InputBackend>(&mut self, event: InputEvent<I>) {
        match event {
            InputEvent::Keyboard { event, .. } => {
                let serial = SERIAL_COUNTER.next_serial();
                let time = Event::time_msec(&event);

                if let Some(action) = self.seat.get_keyboard().unwrap().input(
                    self,
                    event.key_code(),
                    event.state(),
                    serial,
                    time,
                    |data, modifiers, handle| {
                        for (binding, action) in data.config.keybindings.iter() {
                            if event.state() == KeyState::Pressed
                                && binding.modifiers == *modifiers
                                && handle.raw_syms().contains(&binding.key)
                            {
                                return FilterResult::Intercept(action.clone());
                            }
                        }
                        FilterResult::Forward
                    },
                ) {
                    self.handle_action(action);
                };
            }
            InputEvent::PointerMotion { event } => {
                let serial = SERIAL_COUNTER.next_serial();
                let delta = (event.delta_x(), event.delta_y()).into();
                self.pointer_location += delta;

                // clamp to screen limits
                // this event is never generated by winit
                self.pointer_location = self.clamp_coords(self.pointer_location);

                let under = self.window_under();

                let keyboard = self.seat.get_keyboard().unwrap();

                if let Some(d) = under.clone() {
                    keyboard.set_focus(self, Some(d.0), serial);
                }

                if let Some(ptr) = self.seat.get_pointer() {
                    ptr.motion(
                        self,
                        under.clone(),
                        &MotionEvent {
                            location: self.pointer_location,
                            serial,
                            time: event.time_msec(),
                        },
                    );

                    ptr.relative_motion(
                        self,
                        under,
                        &RelativeMotionEvent {
                            delta,
                            delta_unaccel: event.delta_unaccel(),
                            utime: event.time(),
                        },
                    )
                }
            }
            InputEvent::PointerMotionAbsolute { event, .. } => {
                let output = self.workspaces.current().outputs().next().unwrap().clone();

                let output_geo = self.workspaces.current().output_geometry(&output).unwrap();

                let pos = event.position_transformed(output_geo.size) + output_geo.loc.to_f64();

                let serial = SERIAL_COUNTER.next_serial();

                let pointer = self.seat.get_pointer().unwrap();

                self.pointer_location = self.clamp_coords(pos);

                let under = self.window_under();

                let keyboard = self.seat.get_keyboard().unwrap();

                if let Some(d) = under.clone() {
                    keyboard.set_focus(self, Some(d.0), serial);
                }

                pointer.motion(
                    self,
                    under,
                    &MotionEvent {
                        location: pos,
                        serial,
                        time: event.time_msec(),
                    },
                );
            }
            InputEvent::PointerButton { event, .. } => {
                let pointer = self.seat.get_pointer().unwrap();

                let serial = SERIAL_COUNTER.next_serial();

                let button = event.button_code();

                let button_state = event.state();

                pointer.button(
                    self,
                    &ButtonEvent {
                        button,
                        state: button_state,
                        serial,
                        time: event.time_msec(),
                    },
                );
            }
            InputEvent::PointerAxis { event, .. } => {
                let horizontal_amount =
                    event.amount(input::Axis::Horizontal).unwrap_or_else(|| {
                        event
                            .amount_discrete(input::Axis::Horizontal)
                            .unwrap_or(0.0)
                            * 3.0
                    });
                let vertical_amount = event.amount(input::Axis::Vertical).unwrap_or_else(|| {
                    event.amount_discrete(input::Axis::Vertical).unwrap_or(0.0) * 3.0
                });
                let horizontal_amount_discrete = event.amount_discrete(input::Axis::Horizontal);
                let vertical_amount_discrete = event.amount_discrete(input::Axis::Vertical);

                {
                    let mut frame = AxisFrame::new(event.time_msec()).source(event.source());
                    if horizontal_amount != 0.0 {
                        frame = frame.value(Axis::Horizontal, horizontal_amount);
                        if let Some(discrete) = horizontal_amount_discrete {
                            frame = frame.discrete(Axis::Horizontal, discrete as i32);
                        }
                    } else if event.source() == AxisSource::Finger {
                        frame = frame.stop(Axis::Horizontal);
                    }
                    if vertical_amount != 0.0 {
                        frame = frame.value(Axis::Vertical, vertical_amount);
                        if let Some(discrete) = vertical_amount_discrete {
                            frame = frame.discrete(Axis::Vertical, discrete as i32);
                        }
                    } else if event.source() == AxisSource::Finger {
                        frame = frame.stop(Axis::Vertical);
                    }
                    self.seat.get_pointer().unwrap().axis(self, frame);
                }
            }
            _ => {}
        }
    }

    fn clamp_coords(&self, pos: Point<f64, Logical>) -> Point<f64, Logical> {
        if self.workspaces.current().outputs().next().is_none() {
            return pos;
        }

        let (pos_x, pos_y) = pos.into();
        let max_x = self.workspaces.current().outputs().fold(0, |acc, o| {
            acc + self.workspaces.current().output_geometry(o).unwrap().size.w
        });
        let clamped_x = pos_x.max(0.0).min(max_x as f64);
        let max_y = self
            .workspaces
            .current()
            .outputs()
            .find(|o| {
                let geo = self.workspaces.current().output_geometry(o).unwrap();
                geo.contains((clamped_x as i32, 0))
            })
            .map(|o| self.workspaces.current().output_geometry(o).unwrap().size.h);

        if let Some(max_y) = max_y {
            let clamped_y = pos_y.max(0.0).min(max_y as f64);
            (clamped_x, clamped_y).into()
        } else {
            (clamped_x, pos_y).into()
        }
    }
}
